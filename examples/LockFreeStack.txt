# https://github.com/Begun/lockfree-malloc/blob/33e3f229caed2416e5bcf9af196d354247d5e185/stack.h
#
# Should be robust.
#
# void push (T* obj) {
# q0:
#     for ( ; ; ) {
# q1:     Head const old = m_head, h = {(long) obj, old.tag + 1};
# q2:     obj->next = ptr (old);
# q3:     if (cas (&m_head, old, h))
# q4:         return;
#         }
# }
#
# address 1: m_head
# address 2: obj pushed by push1
# address 3: obj pushed by push2
#

# push(2)
thread push1
initial q0
transition q0	q1	local	obj	2
transition q1	q2	read	old	1
transition q2	q3	write	old	obj
transition q4	q5	cas	1	old	obj flag
transition q5	q0	check	!= flag 0
end

# push(3)
thread push2
initial q0
transition q0	q1	local	obj	3
transition q1	q2	read	old	1
transition q2	q3	write	old	obj
transition q4	q5	cas	1	old	obj flag
transition q5	q0	check	!= flag 0
end

# T* pop() {
#     for ( ; ; ) {
# q0:     Head const old = m_head;
# 
# q1:     if (ptr (old) == NULL)
# q2:         return NULL;
# 
# q3:     Head const h = {(long) ptr (old)->next, old.tag};
# 
# q4:     if (cas (&m_head, old, h)) {
# q5:         return ptr (old);
#         }
#     }
# }

# pop()
thread pop
initial q0
transition q0	q1	read	old	0

transition q1	q2	check	== old 0
transition q2	q_end	local	result	0

transition q1	q3	check 	!= old 0
transition q3	q4	read	next	old
transition q4	q4_1	cas	1	old	next flag

transition q4_1	q5	check	== flag 0
transition q5	q_end	local	result	old

transition q4_1	q0	check	!= flag	0

end
