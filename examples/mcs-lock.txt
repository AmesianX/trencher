#
# MCS lock, as presented in
#
# Maurice Herlihy and Nir Shavit. The art of multiprocessor programming.
# Morgan Kaufmann, 2008. Page 155.
#
# IS robust.
#
#   public void lock() {
# q1: QNode qnode = myNode.get();
# q2: QNode pred = tail.getAndSet(qnode);
# q3: if (pred != null) {
# q4:   qnode.locked = true;
# q5:   pred.next = qnode;
# q6:   while (qnode.locked) {}
#     }
#   }
#
#   public void unlock() {
# u1: QNode qnode = myNode.get();
# u2: if (qnode.next == null) {
# u3:   if (tail.compareAndSet(qnode, null))
# u4:     return;
# u5:   while (qnode.next == null) {}
#     }
# u6: qnode.next.locked = false;
# u7: qnode.next = null;
# }
#
# Memory layout:
# tail pointer              : 0
# myNode pointer of thread 1: 1
# myNode pointer of thread 2: 2


thread lock1
initial q0
transition	q0	q1	local	tail	0
transition	q1	q2	local	qnode	1
transition	q2	q2_1	lock
transition	q2_1	q2_2	read	pred	tail
transition	q2_2	q2_3	write	qnode	tail
transition	q2_3	q3	unlock
transition	q3	q4	check	!= pred 0
transition	q3	u1	check	== pred 0
transition	q4	q5	write	1	+ 0 * 2 qnode
transition	q5	q6	write	qnode	+ 1 * 2 pred
transition	q6	q6_1	read	locked	+ 0 * 2 qnode
transition	q6_1	q6	check	locked
transition	q6_1	u1	check	== locked 0

transition	u1	u2	local	qnode	1
transition	u2	u2_1	read	next	+ 1 * 2 qnode
transition	u2_1	u3	check	== next	0
transition	u3	u3_1	lock
transition	u3_1	u3_2	read	tmp	tail
transition	u3_2	u3_3	check	== tmp	qnode
transition	u3_3	u3_4	write	0	tail
transition	u3_4	u4	unlock
transition	u3_2	u3_6	check	!= tmp qnode
transition	u3_6	u5	unlock
transition	u5	u5_1	read	next	+ 1 * 2 qnode
transition	u5_1	u6	check	!= next 0
transition	u5_1	u5	check	== next 0
transition	u6	u6_1	read	next	+ 1 * 2 qnode
transition	u6_1	u7	write	0	+ 0 * 2 next
transition	u7	u8	write	0	+ 1 * 2 qnode
end

thread lock2
initial q0
transition	q0	q1	local	tail	0
transition	q1	q2	local	qnode	2
transition	q2	q2_1	lock
transition	q2_1	q2_2	read	pred	tail
transition	q2_2	q2_3	write	qnode	tail
transition	q2_3	q3	unlock
transition	q3	q4	check	!= pred 0
transition	q3	u1	check	== pred 0
transition	q4	q5	write	1	+ 0 * 2 qnode
transition	q5	q6	write	qnode	+ 1 * 2 pred
transition	q6	q6_1	read	locked	+ 0 * 2 qnode
transition	q6_1	q6	check	locked
transition	q6_1	u1	check	== locked 0

transition	u1	u2	local	qnode	2
transition	u2	u2_1	read	next	+ 1 * 2 qnode
transition	u2_1	u3	check	== next	0
transition	u3	u3_1	lock
transition	u3_1	u3_2	read	tmp	tail
transition	u3_2	u3_3	check	== tmp	qnode
transition	u3_3	u3_4	write	0	tail
transition	u3_4	u4	unlock
transition	u3_2	u3_6	check	!= tmp qnode
transition	u3_6	u5	unlock
transition	u5	u5_1	read	next	+ 1 * 2 qnode
transition	u5_1	u6	check	!= next 0
transition	u5_1	u5	check	== next 0
transition	u6	u6_1	read	next	+ 1 * 2 qnode
transition	u6_1	u7	write	0	+ 0 * 2 next
transition	u7	u8	write	0	+ 1 * 2 qnode
end
