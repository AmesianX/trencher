This document explains how to run Trencher.

Prerequisites
=============

You may want to install the following package to be able to produce
visual representations of the input and instrumented programs:

    * Graphviz <http://www.graphviz.org/>

Checking and Enforcing Robustness
=================================

Trencher is a console tool that has four main command-line options:
    -r    check for robustness,
    -f    insert fences to enforce robustness,
    -trf  check for triangular race freedom,
    -ftrf insert fences to enforce triangular race freedom.

Running the tool without arguments gives the full list of supported
command-line options.

Trencher's output should be self-explanatory:

$ trencher -r examples/peterson.txt
Program IS NOT robust.

$ trencher -f examples/peterson.txt
Computed fences for enforcing robustness (2 total): (t1,q2) (t0,q2)

$ trencher -r examples/trf.txt
Program IS robust.

$ trencher -trf examples/trf.txt
Program IS NOT free from triangular data races.

$ trencher -ftrf examples/trf.txt
Computed fences for enforcing triangular race freedom (1 total): (t1,q1)

Dumping the Input and Instrumented Programs
===========================================

Trencher allows to dump the input and the instrumented programs in DOT
format.

Run 'trencher -dot file.txt | dot -Tpdf > file.pdf' to get a visual
representation of the input program.

Run 'trencher -rdot file.txt | dot -Tpdf > file.pdf' to get a visual
representation of the input program instrumented for checking robustness.

# vim:set et sts=4 sw=4 tw=72:
